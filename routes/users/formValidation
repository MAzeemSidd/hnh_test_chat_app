// validators.js
const { body } = require('express-validator');
const { validationResult } = require('express-validator');

//Rules for Login
const loginValidationRules = [
    body('email').isEmail().withMessage('Email must be valid'),
    body('password')
        .isLength({ min: 8 }).withMessage('Password must be at least 8 characters long')
        .matches(/[a-z]/).withMessage('Password must contain at least one lowercase letter')
        .matches(/[A-Z]/).withMessage('Password must contain at least one uppercase letter')
        .matches(/\d/).withMessage('Password must contain at least one number')
        .matches(/[\W_]/).withMessage('Password must contain at least one special character'),
];

//Rules for Signup
const signupValidationRules = [
    body('firstname').isLength({ min: 3, max: 25 }).withMessage('First name must be between 3 and 25 characters'),
    body('lastname').isLength({ min: 3, max: 15 }).withMessage('Last name must be between 3 and 10 characters'),
    body('email').isEmail().withMessage('Email must be valid'),
    body('password')
        .isLength({ min: 8 }).withMessage('Password must be at least 8 characters long')
        .matches(/[a-z]/).withMessage('Password must contain at least one lowercase letter')
        .matches(/[A-Z]/).withMessage('Password must contain at least one uppercase letter')
        .matches(/\d/).withMessage('Password must contain at least one number')
        .matches(/[\W_]/).withMessage('Password must contain at least one special character'),
];

// Middleware for checking validation and formatting errors
const formValidation = (req, res, next) => {
    const err = validationResult(req); 

    if (!err.isEmpty()) {
        const errorArray = [];

        const pathsChecked = {
            firstname: false,
            lastname: false,
            email: false,
            password: false,
        };

        err.array().forEach(error => {
            if (error.path === 'firstname' && !pathsChecked.firstname) {
                errorArray.push('First name must be between 3 and 25 characters');
                pathsChecked.firstname = true;
            }
            if (error.path === 'lastname' && !pathsChecked.lastname) {
                errorArray.push('Last name must be between 3 and 10 characters');
                pathsChecked.lastname = true;
            }
            if (error.path === 'email' && !pathsChecked.email) {
                errorArray.push('Email must be valid');
                pathsChecked.email = true;
            }
            if (error.path === 'password' && !pathsChecked.password) {
                errorArray.push('Password must have 8 characters, must have Alphabets (must have one Capital letter), numbers, and 1 special character');
                pathsChecked.password = true;
            }
        });

        return res.status(400).json({ errors: errorArray });
    }
    
    next(); // Pass control to the next middleware if no errors
}

module.exports = { loginValidationRules, signupValidationRules, formValidation };
